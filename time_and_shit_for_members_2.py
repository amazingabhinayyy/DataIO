# -*- coding: utf-8 -*-
"""TIME AND SHIT FOR MEMBERS.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MoUOJ2mtxcYt1ajzqwLuufLMvl6QsFXY
"""

import pandas as pd
import math
from google.colab import drive
drive.mount('/content/drive')

months = ["./drive/MyDrive/DATAIO/January.csv", "./drive/MyDrive/DATAIO/February.csv", "./drive/MyDrive/DATAIO/March.csv", "./drive/MyDrive/DATAIO/April.csv",
         "./drive/MyDrive/DATAIO/May.csv", "./drive/MyDrive/DATAIO/June.csv", "./drive/MyDrive/DATAIO/July.csv", "./drive/MyDrive/DATAIO/August.csv",
         "./drive/MyDrive/DATAIO/September.csv", "./drive/MyDrive/DATAIO/October.csv", "./drive/MyDrive/DATAIO/November.csv", "./drive/MyDrive/DATAIO/December.csv"]

def statuscheck(status):
    return status == "member"

for file_path in months:
    month_name = file_path.split("/")[-1].split(".")[0]  # Extracting month from file path
    df = pd.read_csv(file_path)
    df['started_at'] = pd.to_datetime(df['started_at'])
    df['ended_at'] = pd.to_datetime(df['ended_at'])
    df['trip_time'] = (df['ended_at'] - df['started_at']).dt.total_seconds() / 60
    df['member'] = df['member_casual'].apply(statuscheck)
    if df['member'] == True:
      avg_trip_time_member = df[df['member'] == True]['trip_time'].mean()
    else:
      avg_trip_time_casual = df[df['member'] == False]['trip_time'].mean()
    mins_member = math.floor(avg_trip_time_member)
    secs_member = math.floor((avg_trip_time_member - mins_member) * 60)

    mins_casual = math.floor(avg_trip_time_casual)
    secs_casual = math.floor((avg_trip_time_casual - mins_casual) * 60)

    print(f"Average trip time for {month_name} (Member): {mins_member} mins and {secs_member} secs")
    print(f"Average trip time for {month_name} (Casual): {mins_casual} mins and {secs_casual} secs")

import pandas as pd
import math
from google.colab import drive
drive.mount('/content/drive')

months = ["./drive/MyDrive/DATAIO/January.csv", "./drive/MyDrive/DATAIO/February.csv", "./drive/MyDrive/DATAIO/March.csv", "./drive/MyDrive/DATAIO/April.csv",
         "./drive/MyDrive/DATAIO/May.csv", "./drive/MyDrive/DATAIO/June.csv", "./drive/MyDrive/DATAIO/July.csv", "./drive/MyDrive/DATAIO/August.csv",
         "./drive/MyDrive/DATAIO/September.csv", "./drive/MyDrive/DATAIO/October.csv",,  "./drive/MyDrive/DATAIO/December.csv"]

def statuscheck(status):
    return status == "member"

for file_path in months:
    month_name = file_path.split("/")[-1].split(".")[0]  # Extracting month from file path
    df = pd.read_csv(file_path)
    df['started_at'] = pd.to_datetime(df['started_at'])
    df['ended_at'] = pd.to_datetime(df['ended_at'])
    df['trip_time'] = (df['ended_at'] - df['started_at']).dt.total_seconds() / 60
    df['member'] = df['member_casual'].apply(statuscheck)

    avg_trip_time_member = df[df['member']]['trip_time'].mean()/2
    avg_trip_time_casual = df[~df['member']]['trip_time'].mean()/2

    mins_member = math.floor(avg_trip_time_member)
    secs_member = math.floor((avg_trip_time_member - mins_member) * 60)

    mins_casual = math.floor(avg_trip_time_casual)
    secs_casual = math.floor((avg_trip_time_casual - mins_casual) * 60)

    print(f"Average trip time for {month_name} (Member): {mins_member} mins and {secs_member} secs")
    print(f"Average trip time for {month_name} (Casual): {mins_casual} mins and {secs_casual} secs")

import pandas as pd
import math
import matplotlib.pyplot as plt
from google.colab import drive
drive.mount('/content/drive')

months = ["./drive/MyDrive/DATAIO/January.csv", "./drive/MyDrive/DATAIO/February.csv", "./drive/MyDrive/DATAIO/March.csv", "./drive/MyDrive/DATAIO/April.csv",
         "./drive/MyDrive/DATAIO/May.csv", "./drive/MyDrive/DATAIO/June.csv", "./drive/MyDrive/DATAIO/July.csv", "./drive/MyDrive/DATAIO/August.csv",
         "./drive/MyDrive/DATAIO/September.csv", "./drive/MyDrive/DATAIO/October.csv", "./drive/MyDrive/DATAIO/November.csv", "./drive/MyDrive/DATAIO/December.csv"]
stmonths=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dex"]
def statuscheck(status):
    return status == "member"

avg_trip_times_member = []
avg_trip_times_casual = []

for file_path in months:
    month_name = file_path.split("/")[-1].split(".")[0]  # Extracting month from file path
    df = pd.read_csv(file_path)
    df['started_at'] = pd.to_datetime(df['started_at'])
    df['ended_at'] = pd.to_datetime(df['ended_at'])
    df['trip_time'] = (df['ended_at'] - df['started_at']).dt.total_seconds() / 60
    df['member'] = df['member_casual'].apply(statuscheck)
    avg_trip_time_member = df[df['member']]['trip_time'].mean()
    avg_trip_time_casual = df[~df['member']]['trip_time'].mean()

    avg_trip_times_member.append(avg_trip_time_member)
    avg_trip_times_casual.append(avg_trip_time_casual)

    mins_member = math.floor(avg_trip_time_member)
    secs_member = math.floor((avg_trip_time_member - mins_member) * 60)

    mins_casual = math.floor(avg_trip_time_casual)
    secs_casual = math.floor((avg_trip_time_casual - mins_casual) * 60)

    print(f"Average trip time for {month_name} (Member): {mins_member} mins and {secs_member} secs")
    print(f"Average trip time for {month_name} (Casual): {mins_casual} mins and {secs_casual} secs")

# Plotting
plt.figure(figsize=(10, 6))
bar_width = 0.35
plt.bar(stmonths, avg_trip_times_member, bar_width, label='Member', alpha=0.7)
plt.bar([i + bar_width for i in range(len(stmonths))], avg_trip_times_casual, bar_width, label='Casual', alpha=0.7)
plt.xlabel('Month')
plt.ylabel('Average Trip Time (minutes)')
plt.title('Average Trip Time by User Type')
plt.xticks([i + bar_width/2 for i in range(len(stmonths))], stmonths, rotation=45)
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()

